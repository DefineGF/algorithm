题目描述：
 给你一个字符串 s，找到 s 中最长的回文子串

暴力算法：终究还是超时了
  public String longestPalindrome(String s) {
        int an1 = 0, an2 = 0;
        int f1 = an1, f2 = an2;
        int len = 1;
        boolean isSet = false;
        for (int i = 0; i < s.length(); i++) {
            for (int j = s.length() - 1; j >= i; j--) {
                int t1 = i, t2 = j;
                while (t1 <= t2) {
                    if (s.charAt(t1) == s.charAt(t2)) {
                        if (!isSet) {
                            isSet = true;
                            an1 = t1;
                            an2 = t2;
                        }
                        t1++;
                        t2--;
                    } else {
                        isSet = false;
                        an1 = an2 = 0;
                        break;
                    }
                }
                isSet = false;
                if (t1 > t2) {
                    if (an2 - an1 + 1 > len) {
                        f1 = an1;
                        f2 = an2;
                        len = an2 - an1 + 1;
                    }
                }
            }
        }
        return s.substring(f1, f2 + 1);
    }
   虽然超时，但是使用双指针的思想，还是有可取之处；
  
  动态规划：
  public String longestPalindrome2(String s) {
        if (s == null || s.length() == 1) return s;
        int n = s.length();
        boolean [][]dp = new boolean[n][n];
        for (int i = 0; i < n; i++) {
            dp[i][i] = true;
        }
        int maxLen = 1;
        int begin  = 0;
        for (int i = 1; i < n; i++) {
            for (int j = 0; j < i; j++) {
                if (s.charAt(j) != s.charAt(i)) {
                    dp[j][i] = false;
                } else {
                    if (i - j < 3) { // (i - j + 1 <= 3) -> axa(3); aa(2); a(1)
                        dp[j][i] = true;
                    } else{
                        dp[j][i] = dp[j + 1][i - 1];
                    }
                }
                if (dp[j][i] && i - j + 1 > maxLen) {
                    maxLen = i - j + 1;
                    begin = j;
                }
            }

        }
        return s.substring(begin, begin + maxLen);
    }
  其思想就是：
  string[i] == string[j]:
    1: 子字符串长度小于等于3，比如a(1),aa(2),axa(3,其中x为任意字符)，那么即可认为是回文数；
    2：大于3时，判断string(i+1, j-1)是否是回文数即可；
    
